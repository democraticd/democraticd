An enforced democratic server
-----------------------

You install the democratic daemon on your server, and it immediately kicks you off the system.
It changes the root password, closes down ttys and sshd and removes
them from the startup process.
It starts a web service providing the only way to make changes to the system:
Users sign up, and can propose code changes (git pull/patch) which a majority of users must vote for before the live code is updated. This is the only way to change the system.

You are now running an open-source democratic internet service, enforced by the democratic daemon.
Want to set up mail forwarding, change the voting rules, or just the font on the front page?
Submit a code change!
All live code is pushed to an off-server repository in case of catastrophic failure.

Potential features:
- Delegative democracy so non-devs can use it, + you can say "Auto vote for changes that both Bob & Emily vote for".
- Server forking + per-user data migration, for contentious issues and creating niche communities.
- Users might pay subscriptions, and vote for funding devs & paying server costs.
- Modular code so votes can carry forward between changes + you can say "Auto vote for changes to 'webforum' that Dave votes for"

# don't post this bit unless people ask
There is a danger of people registering shill accounts to boost their voting power - hopefuly things like CAPTCHAs or suspending voting rights for inactive accounts will be enough. Paid accounts are one option, resulting in a capitalist system where the power lies with the money. Maybe accounts could be tied to a system where it's difficult to get more than one identity.

I've developed a prototype democratic daemon now running at http://runbyyou.com - the live code is pushed offsite to github blah (AGPL). You can make a quick change to e.g. html with the text editor on GitHub, and when you open a pull request the daemon will automatically put your change up for voting. I'd like to add support for open git platforms like Gitorious, but they don't have an API yet.

I spun up a fresh Debian blah on Linode, ssh'd in, typed '', and the daemon kicked me off. I can no longer get a shell on this system. To some extent you'll have to trust I didn't backdoor it - you could always propose the install of a backdoor-checking program, and you can see the live output of ps, /root/.bash_history and blah here.

I do still have the power to pull the server plug and change the domain records - when there are Bitcoin payment APIs for cloud computing, the daemon could pay for itself and the human could be taken out of that loop.



MVP:

- lock out root

- web service with form for a git pull, which can run some script as root
    
    could have a commit.json file, with a flag "runInstall.py"
    But then to install from scratch, we have to run through entire git history install scripts
    + worse, you can't just make a patch for some html if the last commit had runInstall flag set!
    
    how do debian packages update?? could we use that system?
        - yes: the git repo contains all the info to build a local deb pkg
            which can pull in dependencies, install stuff to /usr/bin etc
            And it has a system of updating already installed pkgs.
            -> exactly what I want.
            
            Initially this will mean an update to the html will mean stopping all services, updating pkgs, + starting again. But once I have seperate modules this will get fixed :-)

    Still need ability to vote for action that runs root script, for maintenance.
    Ideally we'd have preconfigured actions for every possible maintenance command, but
    there's gonna be a lot of them...
    so a quick back door ability is vital for quick repairs.
    Warn that it must not be abused to make system configuration or code changes.
    
    
$ cat >>~/.bashrc <<EOF
DEBEMAIL="your.email.address@example.org"
DEBFULLNAME="Firstname Lastname"
export DEBEMAIL DEBFULLNAME
EOF
$ . ~/.bashrc

    
dh_make
            Requires folder packagename-version/
  --native (don't require a .orig.tar.gz archive)
  --single (standard binary deb package)
  --yes    (non-interactive, answers yes to all qs)
  --copyright gpl, gpl2, mit etc

rm -rf debian/*.ex debian/*.EX

Files in debian/ still need lots of manual editing :-(
    
then run dpkg-buildpackage
This builds the deb and sticks it in ..
It is now ready to install:
    dpkg -i blah.deb
and to fix dependecies, then do this:
    export DEBIAN_FRONTEND=noninteractive
    apt-get --yes --fix-broken install
I think gdebi-core can do this all in one
    
    
So that's how we can install std debian packages on the target.
But we also need to install democratic demon modules from source!
maybe we could host a debian repository for them??
How would it work for someone just forking some html????
    - After the change has been approved by vote, maybe the daemon could
        auto update the debian files, and push a new version back to github???
        This 2nd version could record things like #votes per proposal etc
        Debian files might have to be template-ized - actually that's probably the wrong thing to do
        With 2 seperate trees, we'd avoid having 2 commits
        git-buildpackage can probably help here
OK, but how do we do daemon modules?
    Is there a way of telling debian certain packages need to be obtained with
    a custom tool?
    Just run a local deb repository! We only need to build + "host" the debs
    once a module has been voted on, so we can trigger that ourselves! YES!
    
Updating locally-built debs:
    Have to update the files in debian / like changlog and version number
    A tool called uupdate can do this (http://www.debian.org/doc/manuals/maint-guide/update.en.html#inspectnewupstream)
    I think 'uscan' can check + download new upstream versions if debian knows where they come from

git-dpb:
    looks similar to git-buildpackage
    
git-buildpackage:
  Description: Suite to help with Debian packages in Git repositories
    This package contains the following tools:
    * git-import-{dsc,dscs}: import existing Debian source packages into a git
      repository
    * git-import-orig: import a new upstream version into the git repository
    * git-buildpackage: build a package out of a git repository, check for local
      modifications and tag appropriately
    * git-dch: generate Debian changelog entries from Git commit messages
    * gbp-{pull,clone}: clone and pull from remote repos
    * gbp-pq: manage debian/patches easily
    * gbp-create-remote-repo: create remote repositories
  Homepage: https://honk.sigxcpu.org/piki/projects/git-buildpackage/
  
  It supports Lintian, which checks deb packages for common errors
  
devscripts (deb) installs a load of useful tools
ubuntu-dev-tools does the same

http://joeyh.name/code/pristine-tar/ may also be useful

git-annex for files too big for git? eg big downloads we want to host??


Configuration management
-------------------------
setting up networking, sshd, apache, nginx etc

etckeepe ? chef? puppet? cfengine? none at all?

cfengine is lightweight enough (~3mb ram) to work on a 1gb VPS, whereas
puppet and chef are pretty heavyweight.

I think a config management tool is gonna be essential for server forking.

